makeVector <- function(x = numeric()) {
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
makevector (2:200)
makeeVctor (2:200)
makeVector (2:200)
makeVector(2:200)
list <- makeVector(rnorm(500))
list
summary(list)
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
cachemean(list)
cachemean(rnorm(500))
rnorm(500)
hist(rnorm(500))
cachemean(rnorm(500))
m
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
m <<- mean
m <<- mean
m
m(15)
m(1:10)
m
m <<- mean
m <<- sd
m(1:10)
x <<- y
m <<- solve
makeCacheMatrix <- function(x = matrix()) {
inverse <- solve(x)
output <- matrix(x,inverse)
}
ex <- matrix(rnorm(20), 5, 5)
ex
makeCacheMatrix(ex)
solve(ex)
ex <- matrix(rnorm(8),2,2)
ex
ex <- matrix(rnorm(8),2,4)
ex
solve(ex)
ex <- matrix(rnorm(8),2,2)
ex(matrix(1:4),2,2)
ex <- matrix(1:4,2,2)
ex
solve(ex)
makeCacheMatrix(ex)
makeCacheMatrix <- function(x = matrix()) {
inverse <- solve(x)
output <- matrix(cbind(x,inverse))
output
}
makeCacheMatrix(ex)
makeCacheMatrix <- function(x = matrix()) {
inverse <- solve(x)
output <- matrix(cbind(x,inverse),length(x),width(x)*2)
output
}
makeCacheMatrix(ex)
ncol(ex)
nrow(ex)
arg(matrix)
args(matrix)
makeCacheMatrix <- function(x = matrix()) {
inverse <- solve(x)
output <- matrix(cbind(x,inverse),nrow(x),ncol(x)*2)
output
}
makeCacheMatrix(ex)
makeCacheMatrix <- function(x = matrix()) {
inverse <- solve(x)
output <- list(x,inverse)
output
}
makeCacheMatrix(ex)
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
ls(set)
m <<- mean
m(1:4)
setmean <- function(mean) m <<- mean
setmean(1:4)
setmean(1:4)
ls(setmean)
x$getmean()
x <- 1:4
x$getmean()
x <- list(1:4)
x$getmean()
makeVector(1:4)
stuff <- makeVector(1:4)
stuff
summary(stuff)
x$getmean
x$getmean(1:4)
x$setmean(1:4)
x$set
x$set()
cachmean(stuff)
cachemean(stuff)
makeVector(1:4)
cachemean(stuff)
makeVector(1:1000)
cachemean(stuff)
cachemean(stuff)
makeVector(1:1000)
stuff <- makeVector(1:1000)
cachemean(stuff)
cachemean(stuff)
makeVector <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinv <- function(solve) m <<- solve
getinv <- function() m
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
makeVector <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinv <- function(solve) m <<- solve
getinv <- function() m
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
makeVector(ex)
stuff <- makeVector(ex)
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinv <- function(solve) m <<- solve
getinv <- function() m
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
cacheSolve <- function(x, ...) {
m <- x$getinv()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
else {
data <- x$get()
m <- solve(data)
x$setinv(m)
m
}
}
makeCacheMatrix(ex)
cacheSolve(ex)
stuff <- makeCacheMatrix(ex)
cacheSolve(stuff)
cacheSolve(stuff)
ex <- matrix(1:100,10,10)
ex
stuff <- makeCacheMatrix(ex)
cacheSolve(stuff)
solve(ex)
browser(solve(ex))
ex <- matrix (1:64,8,8)
ex
solve(ex)
ex <- matrix (1:64,5,5)
ex
solve(ex)
ex <- matrix (rnorm(4,4,4),2,2)
ex
solve(ex)
stuff <- makeCacheMatrix(ex)
cacheSolve(stuff)
cacheSolve(stuff)
cacheSolve(stuff)
cacheSolve(stuff)
stuff
ex <- matrix (rnorm(9,4,4),3,3)
solve(ex)
stuff <- makeCacheMatrix(ex)
cacheSolve(stuff)
cacheSolve(stuff)
ex <- matrix(rnorm(16,4,4),4,4)
solve(ex)
stuff <- makeCacheMatrix(ex)
cacheSolve(stuff)
cacheSolve(stuff)
stuff <- makeCacheMatrix(ex)
cacheSolve(stuff)
## makeCacheMatrix is meant to create a special matrix given an input of a matrix.
#This special matrix should also cache the inverse of the given matrix.
#Given that in the example the "vector" is actually a list of fuctions, the "matrix" will also be a list.
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinv <- function(solve) m <<- solve
getinv <- function() m
list(get = get,
setinv = setinv,
getinv = getinv)
}
#The second vector uses the previously identified functions to check if the matrix
#has been solved. If yes, provides the inverse. If not, completes the computation.
cacheSolve <- function(x, ...) {
m <- x$getinv()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
else {
data <- x$get()
m <- solve(data)
x$setinv(m)
m
}
}
makeCacheMatrix(ex)
stuff <- makeCacheMatrix(ex)
cacheSolve(stuff)
cacheSolve(stuff)
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
#  set <- function(y) {
#    x <<- y
#    m <<- NULL
#  }
#  get <- function() x
setinv <- function(solve) m <<- solve
getinv <- function() m
list(get = get <- function() x,
setinv = setinv,
getinv = getinv)
}
stuff <- makeCacheMatrix(ex)
cacheSolve(stuff)
cacheSolve(stuff)
setinv <- function(solve) m <<- solve
setinv(4)
setinv(5)
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
setinv <- function(y) m <<- y
getinv <- function() m
list(get = get <- function() x,
setinv = setinv,
getinv = getinv)
}
stuff <- makeCacheMatrix(ex)
cacheSolve(stuff)
cacheSolve(stuff)
get(4)
get
get()
m
x
x <- ex
get
get()
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
setinv <- function(y) m <<- y
getinv <- function() m
list(get = get <- function() x,
setinv = setinv,
getinv = getinv)
}
#The second vector uses the previously identified functions to check if the matrix
#has been solved. If yes, provides the inverse. If not, completes the computation.
cacheSolve <- function(x, ...) {
m <- x$getinv()
if(!is.null(m)) {
message("retrieving data")
return(m)
}
else {
message("Computing the inverse")
data <- x$get()
m <- solve(data)
x$setinv(m)
m
}
}
ex <- matrix(rnorm(25,5,5),5,5)
ex
solve(ex)
makeCacheMatrix(ex)
stuff <- makeCacheMatrix(ex)
cacheSolve(stuff)
cacheSolve(stuff)
cacheSolve(stuff)
